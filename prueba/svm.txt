Fold_1
TRAIN: [ 29  30  32  34  37  38  39  40  41  42  44  45  46  47  48  50  51  52
  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70
  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88
  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106
 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142
 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160
 161 162 163 164 165 166 167 168 169 170 171 172]
TEST: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 31 33 35 36 43 49]

Fold_2
TRAIN: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  31  33  35  36  43  49  60
  61  64  65  69  70  75  76  77  78  80  81  82  83  84  85  86  87  88
  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106
 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142
 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160
 161 162 163 164 165 166 167 168 169 170 171 172]
TEST: [29 30 32 34 37 38 39 40 41 42 44 45 46 47 48 50 51 52 53 54 55 56 57 58
 59 62 63 66 67 68 71 72 73 74 79]

Fold_3
TRAIN: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  62  63  66  67  68  71  72  73  74  79 104 105
 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142
 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160
 161 162 163 164 165 166 167 168 169 170 171 172]
TEST: [ 60  61  64  65  69  70  75  76  77  78  80  81  82  83  84  85  86  87
  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 107]

Fold_4
TRAIN: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 107 139 140 141
 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159
 160 161 162 163 164 165 166 167 168 169 170 171 172]
TEST: [104 105 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122
 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138]

Fold_5
TRAIN: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138]
TEST: [139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156
 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172]
  ***********
   SVM model
  ***********
-> Fitting the data
Fitting 5 folds for each of 30 candidates, totalling 150 fits
[Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
[Parallel(n_jobs=2)]: Done  46 tasks      | elapsed:    4.8s
[Parallel(n_jobs=2)]: Done 150 out of 150 | elapsed:   12.6s finished
GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=False),
             error_score='raise-deprecating',
             estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
                           decision_function_shape='ovr', degree=3,
                           gamma='auto_deprecated', kernel='rbf', max_iter=-1,
                           probability=True, random_state=None, shrinking=True,
                           tol=0.001, verbose=False),
             iid='warn', n_jobs=2,
             param_grid={'C': [1, 10, 100, 1000, 10000],
                         'gamma': [1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1]},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,
             scoring=None, verbose=1)
SVM best params
{'C': 1, 'gamma': 1e-06}
SVM best score
0.6647398843930635
cv_results
{'mean_fit_time': array([0.12805171, 0.12049723, 0.11946058, 0.11956878, 0.11932216,
       0.11955619, 0.12182961, 0.12008576, 0.11914964, 0.1194489 ,
       0.11940703, 0.12002816, 0.12220759, 0.11943564, 0.12250967,
       0.11907115, 0.1194231 , 0.12103438, 0.12237267, 0.11965151,
       0.11892972, 0.11860189, 0.11949253, 0.11864591, 0.12135358,
       0.12147059, 0.11957765, 0.11953592, 0.11912937, 0.11820908]), 'std_fit_time': array([0.00837645, 0.00090661, 0.00162293, 0.0017539 , 0.00144437,
       0.00166092, 0.000846  , 0.0013325 , 0.0017046 , 0.00108874,
       0.00181616, 0.00204341, 0.00204024, 0.00139932, 0.00442237,
       0.00172306, 0.00154736, 0.00217447, 0.0026546 , 0.0020974 ,
       0.00139957, 0.00153814, 0.00104562, 0.00105383, 0.00179041,
       0.00329117, 0.0014754 , 0.00151495, 0.00086759, 0.00226092]), 'mean_score_time': array([0.00665917, 0.00645208, 0.00621138, 0.00626645, 0.00625854,
       0.00619769, 0.00658174, 0.00627813, 0.00626636, 0.00632958,
       0.00627131, 0.00629721, 0.00631895, 0.00626297, 0.00637331,
       0.00623655, 0.00637255, 0.00615492, 0.00661378, 0.00617371,
       0.00612884, 0.00612187, 0.00613518, 0.00622511, 0.00623307,
       0.00673513, 0.00653558, 0.00620317, 0.00614042, 0.0060812 ]), 'std_score_time': array([8.12905389e-04, 5.31536649e-04, 1.31433535e-04, 1.17153232e-04,
       1.64466659e-05, 7.86639692e-05, 5.25851110e-04, 1.26330768e-04,
       1.48827439e-04, 1.48847787e-04, 1.83071466e-04, 1.37880711e-04,
       1.80463595e-04, 1.84936999e-04, 4.35923231e-04, 4.56572513e-05,
       4.31839184e-04, 1.14572628e-04, 6.95235173e-04, 5.30515573e-05,
       6.25179523e-05, 7.69559629e-05, 7.25098909e-05, 1.67399863e-04,
       6.70149799e-05, 8.58423085e-04, 6.40250913e-04, 7.83273797e-05,
       9.85523781e-05, 2.40346722e-04]), 'param_C': masked_array(data=[1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 100, 100,
                   100, 100, 100, 100, 1000, 1000, 1000, 1000, 1000, 1000,
                   10000, 10000, 10000, 10000, 10000, 10000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_gamma': masked_array(data=[1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1, 1e-06, 1e-05,
                   0.0001, 0.001, 0.01, 0.1, 1e-06, 1e-05, 0.0001, 0.001,
                   0.01, 0.1, 1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1,
                   1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 1, 'gamma': 1e-06}, {'C': 1, 'gamma': 1e-05}, {'C': 1, 'gamma': 0.0001}, {'C': 1, 'gamma': 0.001}, {'C': 1, 'gamma': 0.01}, {'C': 1, 'gamma': 0.1}, {'C': 10, 'gamma': 1e-06}, {'C': 10, 'gamma': 1e-05}, {'C': 10, 'gamma': 0.0001}, {'C': 10, 'gamma': 0.001}, {'C': 10, 'gamma': 0.01}, {'C': 10, 'gamma': 0.1}, {'C': 100, 'gamma': 1e-06}, {'C': 100, 'gamma': 1e-05}, {'C': 100, 'gamma': 0.0001}, {'C': 100, 'gamma': 0.001}, {'C': 100, 'gamma': 0.01}, {'C': 100, 'gamma': 0.1}, {'C': 1000, 'gamma': 1e-06}, {'C': 1000, 'gamma': 1e-05}, {'C': 1000, 'gamma': 0.0001}, {'C': 1000, 'gamma': 0.001}, {'C': 1000, 'gamma': 0.01}, {'C': 1000, 'gamma': 0.1}, {'C': 10000, 'gamma': 1e-06}, {'C': 10000, 'gamma': 1e-05}, {'C': 10000, 'gamma': 0.0001}, {'C': 10000, 'gamma': 0.001}, {'C': 10000, 'gamma': 0.01}, {'C': 10000, 'gamma': 0.1}], 'split0_test_score': array([0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286]), 'split1_test_score': array([0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286,
       0.65714286, 0.65714286, 0.65714286, 0.65714286, 0.65714286]), 'split2_test_score': array([0.68571429, 0.68571429, 0.68571429, 0.68571429, 0.68571429,
       0.68571429, 0.68571429, 0.68571429, 0.68571429, 0.68571429,
       0.68571429, 0.68571429, 0.68571429, 0.68571429, 0.68571429,
       0.68571429, 0.68571429, 0.68571429, 0.68571429, 0.68571429,
       0.68571429, 0.68571429, 0.68571429, 0.68571429, 0.68571429,
       0.68571429, 0.68571429, 0.68571429, 0.68571429, 0.68571429]), 'split3_test_score': array([0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.64705882,
       0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.64705882,
       0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.64705882,
       0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.64705882,
       0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.64705882,
       0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.64705882]), 'split4_test_score': array([0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.67647059,
       0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.67647059,
       0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.67647059,
       0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.67647059,
       0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.67647059,
       0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.67647059]), 'mean_test_score': array([0.66473988, 0.66473988, 0.66473988, 0.66473988, 0.66473988,
       0.66473988, 0.66473988, 0.66473988, 0.66473988, 0.66473988,
       0.66473988, 0.66473988, 0.66473988, 0.66473988, 0.66473988,
       0.66473988, 0.66473988, 0.66473988, 0.66473988, 0.66473988,
       0.66473988, 0.66473988, 0.66473988, 0.66473988, 0.66473988,
       0.66473988, 0.66473988, 0.66473988, 0.66473988, 0.66473988]), 'std_test_score': array([0.01417178, 0.01417178, 0.01417178, 0.01417178, 0.01417178,
       0.01417178, 0.01417178, 0.01417178, 0.01417178, 0.01417178,
       0.01417178, 0.01417178, 0.01417178, 0.01417178, 0.01417178,
       0.01417178, 0.01417178, 0.01417178, 0.01417178, 0.01417178,
       0.01417178, 0.01417178, 0.01417178, 0.01417178, 0.01417178,
       0.01417178, 0.01417178, 0.01417178, 0.01417178, 0.01417178]), 'rank_test_score': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1], dtype=int32), 'split0_train_score': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'split1_train_score': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'split2_train_score': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'split3_train_score': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'split4_train_score': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'mean_train_score': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'std_train_score': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}
mean_test_score
[0.66473988 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988
 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988
 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988
 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988
 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988 0.66473988]
params
[{'C': 1, 'gamma': 1e-06}, {'C': 1, 'gamma': 1e-05}, {'C': 1, 'gamma': 0.0001}, {'C': 1, 'gamma': 0.001}, {'C': 1, 'gamma': 0.01}, {'C': 1, 'gamma': 0.1}, {'C': 10, 'gamma': 1e-06}, {'C': 10, 'gamma': 1e-05}, {'C': 10, 'gamma': 0.0001}, {'C': 10, 'gamma': 0.001}, {'C': 10, 'gamma': 0.01}, {'C': 10, 'gamma': 0.1}, {'C': 100, 'gamma': 1e-06}, {'C': 100, 'gamma': 1e-05}, {'C': 100, 'gamma': 0.0001}, {'C': 100, 'gamma': 0.001}, {'C': 100, 'gamma': 0.01}, {'C': 100, 'gamma': 0.1}, {'C': 1000, 'gamma': 1e-06}, {'C': 1000, 'gamma': 1e-05}, {'C': 1000, 'gamma': 0.0001}, {'C': 1000, 'gamma': 0.001}, {'C': 1000, 'gamma': 0.01}, {'C': 1000, 'gamma': 0.1}, {'C': 10000, 'gamma': 1e-06}, {'C': 10000, 'gamma': 1e-05}, {'C': 10000, 'gamma': 0.0001}, {'C': 10000, 'gamma': 0.001}, {'C': 10000, 'gamma': 0.01}, {'C': 10000, 'gamma': 0.1}]
  Statistics of the model
Accuracy:  0.6363636363636364
matthews_corrcoef:  0.19218663979154194
cohen_kappa_score:  0.0712401055408971
-> Model saved: prueba/SVM_0.64.pkl

-> Test set applicability domain
  Predicted probability
[[0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414095 0.34585905]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.6534475  0.3465525 ]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414028 0.34585972]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65456282 0.34543718]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]
 [0.65414083 0.34585917]
 [0.65414072 0.34585928]
 [0.35953323 0.64046677]
 [0.65414072 0.34585928]
 [0.65414072 0.34585928]]
  Threshold = 0.8
  Comparison between:
 maximum predicted probability for each row and compare to threshold
[False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False]
/home/gallo/anaconda3/lib/python3.6/site-packages/numpy/lib/function_base.py:392: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis)
/home/gallo/anaconda3/lib/python3.6/site-packages/numpy/core/_methods.py:85: RuntimeWarning: invalid value encountered in double_scalars
  ret = ret.dtype.type(ret / rcount)
accuracy_score:  nan
/home/gallo/anaconda3/lib/python3.6/site-packages/sklearn/metrics/classification.py:872: RuntimeWarning: invalid value encountered in double_scalars
  mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp)
matthews_corrcoef:  0.0
/home/gallo/anaconda3/lib/python3.6/site-packages/sklearn/metrics/classification.py:576: RuntimeWarning: invalid value encountered in true_divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)
cohen_kappa_score:  nan
Coverage:  0.0

